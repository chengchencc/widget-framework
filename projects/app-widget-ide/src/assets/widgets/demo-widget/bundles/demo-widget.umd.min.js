!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("widget-core"),require("chart.js"),require("@angular/core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("demo-widget",["exports","widget-core","chart.js","@angular/core","@angular/forms"],e):e(t["demo-widget"]={},t.widgetCore,null,t.ng.core,t.ng.forms)}(this,function(t,e,n,r,o){"use strict";var a=function(){function t(){}return t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=r.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}();function s(t,e,n,r){var o,a=arguments.length,s=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var i=t.length-1;0<=i;i--)(o=t[i])&&(s=(a<3?o(s):3<a?o(e,n,s):o(e,n))||s);return 3<a&&s&&Object.defineProperty(e,n,s),s}function i(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),s=[];try{for(;(void 0===e||0<e--)&&!(r=a.next()).done;)s.push(r.value)}catch(i){o={error:i}}finally{try{r&&!r.done&&(n=a["return"])&&n.call(a)}finally{if(o)throw o.error}}return s}var c=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:r.Component,args:[{selector:"demo-widget-demo-widget",template:'   \n    <div class="alert alert-primary" role="alert">\n    <strong>demo-widget works!</strong>\n    </div>\n  '}]}],t.ctorParameters=function(){return[]},t=s([e.Widget({name:"demo-widget"}),i("design:paramtypes",[])],t)}(),d=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:r.Component,args:[{selector:"demo-widget-demo-widget-nav",template:'<nav class="navbar navbar-expand-md navbar-light bg-light">\n  <a class="navbar-brand" href="#">Navbar</a>\n  <button class="navbar-toggler d-lg-none" type="button" data-toggle="collapse" data-target="#collapsibleNavId" aria-controls="collapsibleNavId"\n      aria-expanded="false" aria-label="Toggle navigation">\n    <span class="navbar-toggler-icon"></span>\n  </button>\n  <div class="collapse navbar-collapse" id="collapsibleNavId">\n    <ul class="navbar-nav mr-auto mt-2 mt-lg-0">\n      <li class="nav-item active">\n        <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>\n      </li>\n      <li class="nav-item">\n        <a class="nav-link" href="#">Link</a>\n      </li>\n      <li class="nav-item dropdown">\n        <a class="nav-link dropdown-toggle" href="#" id="dropdownId" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</a>\n        <div class="dropdown-menu" aria-labelledby="dropdownId">\n          <a class="dropdown-item" href="#">Action 1</a>\n          <a class="dropdown-item" href="#">Action 2</a>\n        </div>\n      </li>\n    </ul>\n    <form class="form-inline my-2 my-lg-0">\n      <input class="form-control mr-sm-2" type="text" placeholder="Search">\n      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>\n    </form>\n  </div>\n</nav>\n',styles:[""]}]}],t.ctorParameters=function(){return[]},t=s([e.Widget({name:"demo-widget-nav"}),i("design:paramtypes",[])],t)}(),p=function(){function t(){}return Object.defineProperty(t.prototype,"fcolor",{get:function(){return this.color||"black"},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype.resetColor=function(){this.color="black"},t.decorators=[{type:r.Component,args:[{selector:"demo-widget-jumbotron",template:'<div class="jumbotron">\n  <h1 class="display-4" [style.color]="fcolor">Hello, world!</h1>\n  <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\n  <hr class="my-4">\n  <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\n  <a class="btn btn-primary btn-lg" href="#" role="button" (click)="resetColor()">reset color</a>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={color:[{type:r.Input}]},t=s([e.Widget({name:"demo-widget-jumbotron"}),i("design:paramtypes",[])],t)}(),u=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:r.Component,args:[{selector:"demo-widget-form-login",template:'<form>\n  <div class="form-group">\n    <label for="exampleInputEmail1">Email address</label>\n    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">\n    <small id="emailHelp" class="form-text text-muted">We\'ll never share your email with anyone else.</small>\n  </div>\n  <div class="form-group">\n    <label for="exampleInputPassword1">Password</label>\n    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">\n  </div>\n  <div class="form-group form-check">\n    <input type="checkbox" class="form-check-input" id="exampleCheck1">\n    <label class="form-check-label" for="exampleCheck1">Check me out</label>\n  </div>\n  <button type="submit" class="btn btn-primary">Submit</button>\n</form>',styles:[""]}]}],t.ctorParameters=function(){return[]},t=s([e.Widget({name:"demo-widget-form-login"}),i("design:paramtypes",[])],t)}(),m=function(){function t(){this.settings={title:"Card Title",subtitle:"Sub Title"},this.titleClick=new r.EventEmitter}return t.prototype.ngOnInit=function(){},t.prototype.onTitleClick=function(t){this.titleClick.emit({event:t,msg:"red"})},t.decorators=[{type:r.Component,args:[{selector:"demo-widget-card",template:'<div class="card" style="">\n  <div class="card-body">\n    <h5 class="card-title">{{settings.title}}</h5>\n    <h6 class="card-subtitle mb-2 text-muted">{{settings.subtitle}}</h6>\n    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card\'s content.</p>\n    <a href="#" class="card-link" (click)="onTitleClick($event)">Card link</a>\n    <a href="#" class="card-link">Another link</a>\n    <button class="btn btn-danger">click</button>\n  </div>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={settings:[{type:r.Input}],titleClick:[{type:r.Output}]},t=s([e.Widget({name:"demo-widget-card"}),i("design:paramtypes",[])],t)}(),g=function(){function t(){this.settingsChange=new r.EventEmitter}return t.prototype.ngOnInit=function(){},t.prototype.save=function(){this.settingsChange.emit(this.settings)},t.decorators=[{type:r.Component,args:[{selector:"lib-gsp-widget-chartjs-settings",template:'<p>\r\n    this is chartjs widget settings page!\r\n</p>\r\n\r\n<div class="form-group">\r\n  <label for="chartTitle">标题</label>\r\n  <input type="text" name="chartTitle" id="chartTitle" class="form-control" placeholder="请输入标题" aria-describedby="chartTitleHelper" [(ngModel)]="settings.title">\r\n  <small id="chartTitleHelper" class="text-muted">请输入标题。。。</small>\r\n</div>\r\n\r\n<div class="form-group">\r\n  <label class="custom-control custom-radio">\r\n    <input type="radio" name="legend" id="legend" value="true" class="custom-control-input" [(ngModel)]="settings.legend">\r\n    <span class="custom-control-indicator"></span>\r\n    <span class="custom-control-description">显示图例</span>\r\n  </label>\r\n</div>\r\n\r\n<button (click)="save()" type="button" name="save" id="savesettings" class="btn btn-dark btn-block">save</button>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={settings:[{type:r.Input}],settingsChange:[{type:r.Output}]},t}(),f=function(){function t(){}return t.prototype.ngOnInit=function(){},t.prototype.ngAfterViewInit=function(){this.ctx=this.myCanvas.nativeElement.getContext("2d");new Chart(this.ctx,{type:"pie",data:{labels:["New","In Progress","On Hold"],datasets:[{label:"# of Votes",data:[1,2,3],backgroundColor:["rgba(255, 99, 132, 1)","rgba(54, 162, 235, 1)","rgba(255, 206, 86, 1)"],borderWidth:1}]},options:{responsive:!1}})},t.decorators=[{type:r.Component,args:[{selector:"lib-gsp-widget-chartjs",template:'\n  <canvas width="300" height="300" #chart></canvas>\n\n  '}]}],t.ctorParameters=function(){return[]},t.propDecorators={myCanvas:[{type:r.ViewChild,args:["chart"]}]},t=s([e.Widget({name:"chart",settingComponent:g}),i("design:paramtypes",[])],t)}(),b=[f,g],y=function(){function t(){}return t.decorators=[{type:r.NgModule,args:[{declarations:function n(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(l(arguments[e]));return t}([c,d,p,u,m],b),imports:[o.FormsModule],exports:[c]}]}],t}();t.DemoWidgetService=a,t.DemoWidgetComponent=c,t.DemoWidgetModule=y,t.ɵd=m,t.ɵf=g,t.ɵe=f,t.ɵa=d,t.ɵc=u,t.ɵb=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=demo-widget.umd.min.js.map